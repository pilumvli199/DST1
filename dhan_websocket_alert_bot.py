import os
import time
import requests
import traceback
import logging

# dhanhq ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§Ü‡§£‡§ø ‡§ï‡•ç‡§≤‡§æ‡§∏‡•á‡§∏ ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡§æ
# MarketFeed: ‡§Æ‡•Å‡§ñ‡•ç‡§Ø WebSocket ‡§ï‡•ç‡§≤‡§æ‡§∏
# NSE, Ticker: Exchange Segment ‡§Ü‡§£‡§ø Subscription Type Constants (dhanhq ‡§ö‡•ç‡§Ø‡§æ ‡§â‡§¶‡§æ‡§π‡§∞‡§£‡§æ‡§Ç‡§®‡•Å‡§∏‡§æ‡§∞)
try:
    from dhanhq.marketfeed import marketfeed
    MarketFeed = marketfeed
    # Constants: marketfeed.NSE, marketfeed.Ticker ‡§µ‡§æ‡§™‡§∞‡§æ
    # ‡§ú‡§∞ MarketFeed ‡§ï‡•ç‡§≤‡§æ‡§∏ marketfeed ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§≤‡§π‡§æ‡§® ‡§Ö‡§ï‡•ç‡§∑‡§∞‡§æ‡§§ ‡§Ö‡§∏‡•á‡§≤, ‡§§‡§∞ ‡§§‡•á ‡•≤‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ
except ImportError:
    try:
        from dhanhq import MarketFeed, NSE, Ticker
    except ImportError:
        # Fallback to older import method if the above fails
        import dhanhq.marketfeed as marketfeed_module
        MarketFeed = marketfeed_module.MarketFeed
        NSE = marketfeed_module.NSE
        Ticker = marketfeed_module.Ticker

# DhanHQ ‡§ö‡•ç‡§Ø‡§æ ‡§â‡§¶‡§æ‡§π‡§∞‡§£‡§æ‡§Ç‡§®‡•Å‡§∏‡§æ‡§∞ NSE ‡§Ü‡§£‡§ø Ticker Constants ‡§∂‡•ã‡§ß‡§£‡•á (‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§™‡§¶‡•ç‡§ß‡§§)
try:
    import dhanhq.marketfeed as marketfeed_module
    marketfeed_class = getattr(marketfeed_module, 'MarketFeed', None) or getattr(marketfeed_module, 'marketfeed', None)
    if not marketfeed_class:
        raise ImportError("Could not find MarketFeed class.")
    
    # Constants (NSE, Ticker, etc.) ‡§π‡•á ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§•‡•á‡§ü ‡•≤‡§ü‡•ç‡§∞‡§ø‡§¨‡•ç‡§Ø‡•Ç‡§ü ‡§Æ‡•ç‡§π‡§£‡•Ç‡§® ‡§Ö‡§∏‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§∂‡§ï‡•ç‡§Ø‡§§‡§æ ‡§Ü‡§π‡•á.
    NSE = getattr(marketfeed_module, 'NSE', None)
    Ticker = getattr(marketfeed_module, 'Ticker', None) or getattr(marketfeed_module, 'TICKER', None)
    
except ImportError as e:
    # ‡§ú‡§∞ dhanhq ‡§≤‡§æ‡§Ø‡§¨‡•ç‡§∞‡§∞‡•Ä ‡§ñ‡•Ç‡§™ ‡§ú‡•Å‡§®‡•Ä ‡§Ö‡§∏‡•á‡§≤ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§∞‡§ö‡§®‡§æ ‡§µ‡•á‡§ó‡§≥‡•Ä ‡§Ö‡§∏‡•á‡§≤
    logging.error(f"Failed deep import from dhanhq.marketfeed: {e}")
    raise SystemExit(1)

# ----------------------------------------------------
# ‡§á‡§•‡•á ‡§Ü‡§™‡§£ Constants ‡§Ü‡§£‡§ø Class ‡§Ö‡§ö‡•Ç‡§ï‡§™‡§£‡•á ‡•≤‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§ñ‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡§∞‡•Ç
# ----------------------------------------------------

# --- ‡•ß. ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∂‡§® (Configuration) ---
CLIENT_ID = os.environ.get("DHAN_CLIENT_ID") 
ACCESS_TOKEN = os.environ.get("DHAN_ACCESS_TOKEN") 
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID") 
HDFC_ID = '1333'
SEND_INTERVAL_SECONDS = 60

# ‡§á‡§Ç‡§∏‡•ç‡§ü‡•ç‡§∞‡•Å‡§Æ‡•á‡§Ç‡§ü‡•ç‡§∏ ‡§≤‡§ø‡§∏‡•ç‡§ü (Constants ‡§ö‡•Ä ‡§ñ‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§®‡§Ç‡§§‡§∞)
if NSE is None or Ticker is None:
    # ‡§ú‡§∞ Constants ‡§∏‡§æ‡§™‡§°‡§≤‡•á ‡§®‡§æ‡§π‡•Ä‡§§, ‡§§‡§∞ ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§•‡§æ‡§Ç‡§¨‡•á‡§≤
    logging.error("NSE or Ticker constants are not found in dhanhq module. Exiting.")
    raise SystemExit(1)

instruments = [
    # ‡§Ü‡§§‡§æ 'NSE' ‡§Ü‡§£‡§ø 'Ticker' ‡§π‡•á ‡§µ‡•ç‡§π‡•á‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ ‡§Æ‡•ç‡§π‡§£‡•Ç‡§® ‡§µ‡§æ‡§™‡§∞‡§≤‡•á ‡§ú‡§æ‡§§‡•Ä‡§≤
    (NSE, HDFC_ID, Ticker)
]

# ‡§°‡•á‡§ü‡§æ ‡§∏‡§æ‡§†‡§µ‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ó‡•ç‡§≤‡•ã‡§¨‡§≤ ‡§µ‡•ç‡§π‡•á‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏
latest_ltp = {HDFC_ID: None}
last_telegram_send_time = time.time()

# --- ‡•®. Telegram ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
def send_telegram_message(ltp_price):
    """LTP ‡§ò‡•á‡§ä‡§® Telegram Bot API ‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§Æ‡•á‡§∏‡•á‡§ú ‡§™‡§æ‡§†‡§µ‡§§‡•á."""
    global last_telegram_send_time
    
    timestamp = time.strftime("%H:%M:%S IST")
    
    # ‡•≤‡§≤‡§∞‡•ç‡§ü ‡§´‡•â‡§∞‡•ç‡§Æ‡•Ö‡§ü‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Æ‡•á‡§∏‡•á‡§ú ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ
    message = f"""*HDFC BANK LTP ALERT!* üîî
‡§µ‡•á‡§≥: {timestamp}
        
*HDFC BANK*
‡§®‡§µ‡•Ä‡§®‡§§‡§Æ LTP: ‚Çπ *{ltp_price:.2f}*

_‡§π‡§æ ‡•≤‡§≤‡§∞‡•ç‡§ü ‡§¶‡§∞ 1 ‡§Æ‡§ø‡§®‡§ø‡§ü‡§æ‡§®‡•á WebSocket Data ‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§Ü‡§π‡•á._"""
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown' 
    }
    try:
        requests.post(url, data=payload)
        # logging.info(f"[{timestamp}] Telegram alert sent: ‚Çπ{ltp_price:.2f}")
        last_telegram_send_time = time.time() # ‡§µ‡•á‡§≥ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§æ

    except Exception as e:
        logging.error(f"Error sending Telegram message: {e}")

# --- ‡•©. WebSocket ‡§°‡•á‡§ü‡§æ ‡§π‡§Å‡§°‡§≤‡§∞ ---
def market_feed_handler(response):
    """WebSocket ‡§ï‡§°‡•Ç‡§® ‡§°‡•á‡§ü‡§æ ‡§Æ‡§ø‡§≥‡§æ‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§ï‡•â‡§≤ ‡§π‡•ã‡§§‡•á."""
    global latest_ltp

    # WebSocket response ‡§Æ‡§ß‡•ç‡§Ø‡•á lastTradedPrice (LTP) ‡§Ü‡§π‡•á ‡§ï‡§æ ‡§§‡•á ‡§§‡§™‡§æ‡§∏‡§æ
    if response and response.get('securityId') == HDFC_ID and response.get('lastTradedPrice'):
        
        ltp = response['lastTradedPrice']
        latest_ltp[HDFC_ID] = ltp
        # logging.info(f"Real-time update: HDFCBANK LTP: {ltp}")

        # Telegram ‡§Æ‡•á‡§∏‡•á‡§ú ‡§™‡§æ‡§†‡§µ‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§µ‡•á‡§≥ ‡§ù‡§æ‡§≤‡•Ä ‡§Ü‡§π‡•á ‡§ï‡§æ ‡§§‡•á ‡§§‡§™‡§æ‡§∏‡§æ
        current_time = time.time()
        if current_time - last_telegram_send_time >= SEND_INTERVAL_SECONDS:
            send_telegram_message(ltp)

# --- ‡•™. ‡§Æ‡•Å‡§ñ‡•ç‡§Ø WebSocket ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ---
def start_market_feed():
    """Dhan Market Feed WebSocket ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡•á."""
    if not CLIENT_ID or not ACCESS_TOKEN or not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logging.error("Error: Environment Variables (DHAN/TELEGRAM) missing. Please set them in Railway.")
        return

    logging.info("DhanHQ WebSocket Service ‡§∏‡•Å‡§∞‡•Ç ‡§π‡•ã‡§§ ‡§Ü‡§π‡•á...")
    logging.info(f"HDFCBANK (ID: {HDFC_ID}) ‡§∏‡§æ‡§†‡•Ä ‡§°‡•á‡§ü‡§æ ‡•≤‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á.")

    backoff = 1
    while True:
        try:
            # ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§´‡•Ä‡§° ‡§ï‡•ç‡§≤‡§æ‡§∏‡§ö‡§æ ‡§µ‡§æ‡§™‡§∞ ‡§ï‡§∞‡§£‡•á
            market_feed = marketfeed_class( 
                CLIENT_ID, 
                ACCESS_TOKEN, 
                instruments, 
                version='2.0'
            )
            
            # WebSocket ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§Ü‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§°‡•á‡§ü‡§æ‡§∏‡§æ‡§†‡•Ä handler ‡§∏‡•á‡§ü ‡§ï‡§∞‡§æ
            market_feed.run_forever(market_feed_handler)

        except Exception as e:
            # HTTP 400 ‡§Æ‡§ø‡§≥‡§æ‡§≤‡•ç‡§Ø‡§æ‡§∏ reconnection logic
            logging.error(f"\n--- FATAL MARKET FEED ERROR: {e} ---")
            logging.warning(f"5 ‡§∏‡•á‡§ï‡§Ç‡§¶ ‡§•‡§æ‡§Ç‡§¨‡•Ç‡§® ‡§™‡§∞‡§§ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®‡§ö‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á. (Backoff: {backoff}s)")
            
            # 400 ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä‡§∏‡§æ‡§†‡•Ä, ‡§ü‡•ã‡§ï‡§® ‡§è‡§ï‡•ç‡§∏‡§™‡§æ‡§Ø‡§∞‡•Ä‡§ö‡•Ä ‡§∂‡§ï‡•ç‡§Ø‡§§‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§Ü‡§π‡•á.
            if "HTTP 400" in str(e) or "InvalidStatus" in str(e):
                 logging.error("Possible Access Token Expiry or Invalid Token. Please update DHAN_ACCESS_TOKEN in Railway variables.")
            
            time.sleep(backoff)
            backoff = min(60, backoff * 2)
            
        except KeyboardInterrupt:
            logging.info("Exiting bot.")
            break

if __name__ == "__main__":
    start_market_feed()
